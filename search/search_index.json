{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-our-development-wiki","title":"Welcome to Our Development Wiki","text":"<p>Welcome to the heart of our collaborative knowledge space! This Development Wiki is designed as a comprehensive repository tailored for our development teams. It's not just a library of documents but a living, breathing hub for sharing knowledge, enhancing skills, and fostering innovation within our community.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<ul> <li> <p> Policies</p> <p>Our development policies are the backbone of our workflow. Here, you'll find detailed guidelines that outline our approach to coding standards, security measures, data handling practices, and more. These policies ensure we maintain consistency and excellence in every piece of code we write.</p> </li> <li> <p> Procedures</p> <p>Step-by-step guides on how to navigate through our development lifecycle are at your fingertips. From code reviews to deployment strategies, these procedures are designed to streamline our processes, making it easier for everyone to contribute effectively and efficiently.</p> </li> <li> <p> Tips and Tricks</p> <p>Unlock the collective wisdom of our team with an ever-growing collection of tips and tricks. Discover new tools, shortcuts, and best practices that can enhance your productivity and problem-solving skills. This section is all about sharing those little nuggets of wisdom that make a big difference.</p> </li> <li> <p> Best Practices</p> <p>Learn from our experiences with detailed best practices that have been honed over time. This section includes coding conventions, architectural guidelines, and performance optimization strategies that help us build reliable, scalable, and maintainable software.</p> </li> <li> <p> How to Contribute</p> <p>This wiki is a collaborative effort, and your contributions are invaluable. Whether it's updating an existing article, adding a new best practice, or sharing a tip you've discovered, your insights help our development community thrive. See our guide on How to Contribute for more details.</p> </li> <li> <p> Stay Updated</p> <p>As our portfolio evolves, so does our wiki. New technologies, methodologies, and insights will continually enrich this space. We encourage you to visit regularly, engage with the content, and stay connected with the latest in our development practices.</p> </li> </ul>"},{"location":"about/contributing/","title":"Contributing","text":""},{"location":"about/contributing/#contributing-to-the-manos-dev-wiki","title":"Contributing to the Manos Dev Wiki","text":"<p>You are invited to contribute \ud83d\udc96 to this guide by opening issues and submitting pull requests!</p> <p>Here are some ideas \ud83d\udca1 for how and where you can help most with contributions:</p> <ul> <li>Fix any spelling or grammatical mistakes you see as you read.</li> <li>Fix technical inaccuracies.</li> <li>Fix logical or compilation errors in code examples.</li> <li>Expand an explanation to provide more context or improve the clarity of some   topic or concept.</li> </ul> <p>If you're making a small to modest correction, such fixing a spelling error or a syntax error in a code example, then feel free to submit a pull request directly. For changes that may require a large effort on your part (and reviewers as a result), it is strongly recommended that you submit an issue and seek approval of the maintainers/editors before investing your time. It will avoid heartbreak \ud83d\udc94 if the pull request is rejected for various reasons.</p> <p>This wiki is built with MkDocs and Material for MkDocs. Visit their sites for full documentation.</p>"},{"location":"about/contributing/#quick-start-for-docker-with-vscode","title":"Quick Start for Docker with VSCode","text":"<ol> <li>Start VS Code and click on the quick actions Status Bar item in the lower left corner of the window.</li> <li>Select Remote-Containers: Open Folder in Container... from the command list that appears, and open the root folder of the project you just cloned.</li> <li>The window will then reload, but since the container does not exist yet, VS Code will create one. This may take some time, and a progress notification will provide status updates. Fortunately, this step isn't necessary the next time you open the folder since the container will already exist.</li> <li>After the container is built, VS Code automatically connects to it and maps the project folder from your local file system into the container.</li> <li>Open the terminal in VS Code to a bash prompt within the container by clicking on Terminal &gt; New Terminal</li> <li>In the terminal, type <code>mkdocs serve</code> to build and run the web site.</li> <li>Open the web site at http://127.0.0.1:8000/.</li> <li>Begin developing in Visual Studio Code.</li> </ol>"},{"location":"about/contributing/#build-requirements","title":"Build Requirements","text":"<ul> <li>Python</li> <li>MkDocs</li> <li>MkDocs Material</li> </ul> <p>With Python installed, run the following command from the command line:</p> <pre><code>pip install mkdocs-material\npip install mkdocs-video\n</code></pre>"},{"location":"about/contributing/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"about/contributing/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/license/","title":"License","text":""},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright 2024 Rob Prouse</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"architecture/solid/","title":"SOLID Principles","text":""},{"location":"architecture/solid/#solid-principles-in-software-development","title":"SOLID Principles in Software Development","text":"<p>In the world of software development, the SOLID principles play a crucial role in creating software that is easy to maintain, extend, and understand. These principles were introduced by Robert C. Martin, also known as Uncle Bob, and have become a cornerstone for object-oriented design and programming. Let's dive into each principle and understand its significance in software development.</p>"},{"location":"architecture/solid/#s-single-responsibility-principle","title":"S - Single Responsibility Principle","text":"<p>The Single Responsibility Principle states that a class should have one and only one reason to change, meaning it should have only one job. This principle emphasizes the importance of keeping a class focused on a single functionality or concern. By adhering to SRP, developers can ensure that their classes are more robust, easier to understand, and simpler to test. When a class is charged with multiple responsibilities, changes in one responsibility may affect the others, making the code more fragile and harder to maintain.</p>"},{"location":"architecture/solid/#o-openclosed-principle","title":"O - Open/Closed Principle","text":"<p>The Open/Closed Principle suggests that software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. In practical terms, this means you should be able to add new functionality to an entity without changing its existing code. This can be achieved through the use of interfaces or abstract classes, allowing for new functionalities to be added with minimal impact on the existing codebase. OCP encourages a more modular, scalable approach to software development, where enhancements can be made with little to no modification to the existing system.</p>"},{"location":"architecture/solid/#l-liskov-substitution-principle","title":"L - Liskov Substitution Principle","text":"<p>Named after Barbara Liskov, the Liskov Substitution Principle states that objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program. LSP ensures that a subclass can stand in for its superclass. The principle encourages developers to ensure that their subclasses are fully substitutable for their base classes, in terms of behavior. This leads to a more reliable and flexible system where different classes can be used interchangeably without compromising the system's integrity.</p>"},{"location":"architecture/solid/#i-interface-segregation-principle","title":"I - Interface Segregation Principle","text":"<p>The Interface Segregation Principle dictates that no client should be forced to depend on methods it does not use. ISP encourages the splitting of large interfaces into smaller, more specific ones so that clients only need to know about the methods that are of interest to them. This results in a cleaner, decoupled system where dependencies are minimized, enhancing system maintainability and promoting a more modular design.</p>"},{"location":"architecture/solid/#d-dependency-inversion-principle","title":"D - Dependency Inversion Principle","text":"<p>The Dependency Inversion Principle involves two key points:</p> <ol> <li>High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces).</li> <li>Abstractions should not depend upon details. Details (concrete implementations) should depend on abstractions.</li> </ol> <p>DIP aims to reduce the direct coupling between different components of a system, making it more resilient to changes and easier to refactor. By depending on abstractions rather than concrete classes, software becomes more flexible and decoupled, allowing for easier testing and maintenance.</p>"},{"location":"architecture/solid/#conclusion","title":"Conclusion","text":"<p>The SOLID principles are more than just guidelines; they are a foundation for building software that is resilient, scalable, and adaptable to change. By understanding and applying these principles, developers can create systems that are easier to maintain, extend, and understand. While it might require a bit of extra effort in the beginning, the long-term benefits of adhering to the SOLID principles can significantly outweigh the initial investment, leading to more successful and sustainable software projects.</p>"},{"location":"architecture/solid/#further-reading","title":"Further Reading","text":"<ul> <li>C# Best Practices : Dangers of Violating SOLID Principles in C#</li> </ul>"},{"location":"github/account-setup/","title":"GitHub Account Setup","text":""},{"location":"github/account-setup/#github-account-setup","title":"GitHub Account Setup","text":"<p>Please create\u00a0a GitHub\u00a0user and send your username to your GitHub administrator. They will add you to your company's organization.</p> <ol> <li>Set up an account at\u00a0https://github.com/. If you    already have a personal account, you can use it and add your work email to the account.</li> <li>Enable Two Factor Authentication on your\u00a0GitHub\u00a0account for security,    Configuring two-factor authentication -\u00a0GitHub\u00a0Docs</li> <li>For a two factor auth app, we recommend Authy,    but if you are already using Google Authenticator or another app, that is fine.</li> <li>Click on your user icon, go to Your Profile and click Edit Profile.    Set at least the Name field and ideally set other information and a profile photo.</li> <li>Send your username, not your email to your GitHub admin so they can invite    you to the organization.</li> <li>You will need to check the email attached to your account and accept the invite.</li> </ol>"},{"location":"github/account-setup/#best-practices","title":"Best Practices","text":"<p>GitHub accounts are intended to be your personal account for life. As you move between companies throughout your career, you will bring your account with you. Because of that, if you are creating a new account, it is recommended that you do not include the company name in your username.</p> <p>GitHub allows you to register multiple emails to your account. Make sure that your work email is added so that git commits are attributed to your account (see Git Setup).</p> <p>GitHub notifications will go to the Primary email address set up in GitHub. It may be helpful to set your primary email to your work email so that you receive notifications from pull requests, etc.</p>"},{"location":"github/account-setup/#further-reading","title":"Further Reading","text":"<ul> <li>Creating an account on GitHub</li> <li>Setting up your profile</li> <li>GitHub Skills</li> </ul>"},{"location":"github/git-setup/","title":"Git Setup","text":""},{"location":"github/git-setup/#git-setup","title":"Git Setup","text":""},{"location":"github/git-setup/#initial-setup","title":"Initial Setup","text":"<ol> <li>Download and install the latest version of Git.</li> <li>Set your username and email address,</li> </ol> <pre><code>git config --global user.name \"Jane Doe\"\ngit config --global user.email \"jane.doe@aspiresoftware.com\"\n</code></pre> <ol> <li>Confirm that you set the username and email correctly,</li> </ol> <pre><code>git config --global user.name\ngit config --global user.email\n</code></pre>"},{"location":"github/git-setup/#settings-for-line-endings","title":"Settings for Line Endings","text":"<p>Windows and Linux have different line endings for text files. You will want to configure git to convert line endings on Windows or leave them as-is on Mac and Linux.</p> <p>For Windows, it is best if line endings are converted to Unix style when you commit files. To do so, run the command,</p> <pre><code>git config --global core.autocrlf true\n</code></pre> <p>On Mac and Linux which both use Unix style line endings, you should configure git to leave line-endings as-is.</p> <pre><code>git config --global core.autocrlf input\n</code></pre>"},{"location":"github/git-setup/#ignore-files","title":"Ignore Files","text":"<p>Each repository should have a <code>.gitignore</code> file that prevents binary files and other changing files from getting checked into the repository by mistake. Simply add a <code>.gitignore</code> file to the root of a repository.</p> <p>Info</p> <p>The website gitignore.io will generate appropriate <code>.gitignore</code> files for your programming language, operating system or IDE.</p>"},{"location":"github/git-setup/#further-reading","title":"Further Reading","text":"<ul> <li>Git Cheat Sheet</li> <li>Git Submodules</li> <li>Migrating Subversion/SVN to Git</li> <li>GitHub Training Manual</li> <li>Getting started with Git</li> <li>Using Git</li> </ul>"},{"location":"github/github-flow/","title":"GitHub Flow","text":""},{"location":"github/github-flow/#github-flow","title":"GitHub Flow","text":"<p>The GitHub Flow is a lightweight, branch-based workflow that supports teams and projects where deployments are made regularly. This method is designed to be straightforward, facilitating continuous delivery and integration. It's particularly well-suited for projects that require a nimble approach to development and deployment. Here\u2019s how to implement the GitHub Flow in your projects:</p>"},{"location":"github/github-flow/#introduction-to-github-flow","title":"Introduction to GitHub Flow","text":"<p>Unlike Git Flow, the GitHub Flow is centered around a single branch, <code>main</code>, and uses feature branches for development. The steps are simple:</p> <ul> <li>Create a branch.</li> <li>Add commits.</li> <li>Open a Pull Request (PR).</li> <li>Discuss and review your code.</li> <li>Merge into <code>main</code>.</li> <li>Deploy from <code>main</code>.</li> </ul>"},{"location":"github/github-flow/#initial-setup","title":"Initial Setup","text":"<p>Ensure your repository is set up on GitHub and all team members have cloned the repository to their local machines. The <code>main</code> branch will be your primary branch for deployment.</p>"},{"location":"github/github-flow/#creating-a-branch","title":"Creating a Branch","text":"<p>For every new feature, bug fix, or enhancement, create a new branch off the <code>main</code> branch. Use descriptive names for your branches to reflect the work being done.</p> <pre><code>git checkout main\ngit pull origin main\ngit checkout -b &lt;branch_name&gt;\n</code></pre> <p>This isolates your work from the production code in the <code>main</code> branch. It is often helpful to include the issue number in the branch name for reference. For example, <code>git checkout -b issue/123</code>.</p>"},{"location":"github/github-flow/#add-commits","title":"Add Commits","text":"<p>Make your changes locally and commit them to your branch. Commit messages should be clear and descriptive. It is a good idea to \"commit early and often\" as it backs up your work and provides a safety-net. A good rule of thumb is to commit your changes whenever you complete a logical step in the code.</p> <pre><code>git add .\ngit commit -m \"A descriptive commit message\"\n</code></pre> <p>Regularly push your commits to GitHub to back up your work and make it available to other team members.</p> <pre><code>git push origin &lt;branch_name&gt;\n</code></pre>"},{"location":"github/github-flow/#opening-a-pull-request-pr","title":"Opening a Pull Request (PR)","text":"<p>Once your changes are ready and pushed to GitHub, open a Pull Request against the <code>main</code> branch. PRs are a way to start a conversation about the changes you propose. It\u2019s a place to review code, discuss with teammates, and make additional adjustments.</p> <ul> <li>Navigate to your repository on GitHub and click the \"Pull request\" button.</li> <li>Select your branch and ensure it's compared against <code>main</code>.</li> <li>Fill in the details of your PR and create it.</li> </ul> <p>It is considered good practice to include a link to the issue/ticket for the work that you completed and a detailed explanation of what you changed and why. You can make it easier on reviewers by leaving comments on the changes in the PR.</p> <p>If you want to share your changes with your team before it is ready for final review, you can also create a Draft Pull Request.</p>"},{"location":"github/github-flow/#review-and-discuss","title":"Review and Discuss","text":"<p>Your team can now review the changes, leave comments, and suggest modifications. This is an opportunity for collaborative improvement and ensuring code quality.</p> <p>If changes are requested, simply continue work on your branch and push the changes to GitHub. Your changes will automatically appear in your pull request when you push.</p>"},{"location":"github/github-flow/#deploy-from-the-feature-branch-optional","title":"Deploy from the Feature Branch (Optional)","text":"<p>For some teams, it's beneficial to deploy the branch to a staging environment for testing. This ensures that your changes work as expected in a live environment before merging them into <code>main</code>.</p> <p>This can be setup using GitHub Actions.</p>"},{"location":"github/github-flow/#merge-into-main","title":"Merge into Main","text":"<p>Once your PR has been reviewed and approved, and all tests pass, it\u2019s time to merge your changes into <code>main</code>. This action typically triggers an automated deployment process, depending on your project's CI/CD setup.</p>"},{"location":"github/github-flow/#keep-your-branches-in-sync","title":"Keep Your Branches in Sync","text":"<p>After merging, keep your local <code>main</code> and any active feature branches updated to avoid merge conflicts.</p> <pre><code>git checkout main\ngit fetch -p\ngit pull\n</code></pre>"},{"location":"github/github-flow/#best-practices","title":"Best Practices","text":"<ul> <li>Small, Frequent Changes: Make small, incremental changes with frequent   commits and merges to keep the workflow agile.</li> <li>Code Review: Utilize Pull Requests for code review to maintain quality   and foster collaboration.</li> <li>Continuous Integration (CI): Implement CI to automatically build and test   your code for errors. Branch protection rules should be setup to ensure that   the code builds and tests pass before a pull request can be merged.</li> <li>Automate Deployments: Use Continuous Deployment (CD) tools to automate   deployments from <code>main</code>, ensuring smooth and swift updates to your production   environment.</li> </ul> <p>The GitHub Flow offers a simple yet effective way to manage development, encouraging collaboration and streamlining the process of getting changes into production.</p>"},{"location":"github/github-flow/#further-reading","title":"Further Reading","text":"<ul> <li>GitHub Flow</li> <li>GitHub Flow - GitHub Docs</li> <li>GitHub Training Manual</li> </ul>"},{"location":"github/organization-setup/","title":"GitHub Organization Setup","text":""},{"location":"github/organization-setup/#github-organization-setup","title":"GitHub Organization Setup","text":""},{"location":"github/organization-setup/#teams","title":"Teams","text":"<ul> <li>Add a Developers team and invite members</li> <li>Add an Administrators team and invite members</li> </ul>"},{"location":"github/organization-setup/#billing-plans","title":"Billing &amp; Plans","text":"<ul> <li>Upgrade to a Team plan</li> <li>Enter the credit card info</li> <li>Review and click the final \"Upgrade your Organization Account\"</li> </ul>"},{"location":"github/organization-setup/#member-privileges","title":"Member Privileges","text":"<ul> <li>Disable Allow forking of private repositories</li> </ul>"},{"location":"github/organization-setup/#organization-security","title":"Organization Security","text":"<ul> <li>Require two-factor authentication</li> </ul>"},{"location":"github/organization-setup/#security-analysis","title":"Security &amp; Analysis","text":"<ul> <li>Enable all for each option</li> </ul>"},{"location":"github/organization-setup/#repository-defaults","title":"Repository Defaults","text":"<ul> <li>Switch the default branch to <code>main</code></li> <li>Edit/Add labels as desired</li> </ul>"},{"location":"github/organization-setup/#github-repository-setup","title":"GitHub Repository Setup","text":"<p>Do the following for each repository</p>"},{"location":"github/organization-setup/#options","title":"Options","text":"<ul> <li>Disable features you are not using</li> <li>Under the Merge button section, Automatically delete head branches</li> </ul>"},{"location":"github/organization-setup/#manage-access","title":"Manage Access","text":"<ul> <li>Access should only be given to teams, not to individuals so that permissions can be controlled at the organization level</li> <li>Add Developers team with the Maintain permission</li> <li>Add the Administrators team with the Admin permission</li> </ul>"},{"location":"github/organization-setup/#branches","title":"Branches","text":"<ul> <li>Add Branch protection rules for <code>main</code> and other branches like <code>release</code></li> <li>At a minimum, you should set Require a pull request before merging and require approvals</li> <li>If CI/CD is enabled, require status checks to pass before merging</li> <li>Enable other options depending on the team</li> <li>Never allow force pushes or deletions</li> </ul>"},{"location":"github/security-policy/","title":"GitHub Security Policy","text":""},{"location":"github/security-policy/#github-security-policy","title":"GitHub Security Policy","text":""},{"location":"github/security-policy/#enable-two-factor-authentication-2fa","title":"Enable two-factor authentication (2FA)","text":"<ul> <li>Ask all organization members to enable 2FA on their GitHub accounts by visiting https://github.com/settings/security.</li> <li>As an organization owner, enforce 2FA for your organization by going to your organization's Settings &gt; Security, and enabling \"Require two-factor authentication for everyone in your organization.\"</li> </ul>"},{"location":"github/security-policy/#use-strong-and-unique-passwords","title":"Use strong and unique passwords","text":"<ul> <li>Encourage organization members to create strong, unique passwords that are at least 12 characters long and include a mix of uppercase and lowercase letters, numbers, and special characters.</li> <li>Recommend using a password manager like Bitwarden to generate and store unique passwords securely.</li> </ul>"},{"location":"github/security-policy/#require-identifiable-names-on-user-account","title":"Require identifiable names on user account","text":"<ul> <li>Require that users set their full name on their GitHub accounts so that it is easy to identify who a person is and makes audits easier. To do so, click on your user icon, go to Your Profile and click Edit Profile. Set at least the Name field and ideally set other information and a profile photo.</li> </ul>"},{"location":"github/security-policy/#regularly-review-access","title":"Regularly review access","text":"<ul> <li>Periodically review the list of organization members, teams, and collaborators by visiting your organization's People and Teams pages.</li> <li>Remove any inactive or unnecessary users to minimize the risk of unauthorized access.</li> </ul>"},{"location":"github/security-policy/#restrict-repository-access","title":"Restrict repository access","text":"<ul> <li>Use GitHub teams to manage repository access. Create teams with specific access levels and add members to those teams.</li> <li>Assign repository access to teams rather than individual members by visiting a repository's Settings &gt; Manage Access.</li> </ul>"},{"location":"github/security-policy/#implement-branch-protection","title":"Implement branch protection","text":"<ul> <li>Visit your repository's Settings &gt; Branches.</li> <li>Click \"Add rule\" to create a new branch protection rule for your main branch.</li> <li>Configure the rule to require pull requests, status checks, and reviews before merging changes.</li> </ul>"},{"location":"github/security-policy/#use-codeowners","title":"Use codeowners","text":"<ul> <li>Create a CODEOWNERS file in the root directory of your repository.</li> <li>Define code owners for specific files or directories using the GitHub username, team name, or email address, followed by the file or directory pattern.</li> <li>More information: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners</li> </ul>"},{"location":"github/security-policy/#use-github-actions-securely","title":"Use GitHub Actions securely","text":"<ul> <li>Limit the use of third-party actions to trusted sources.</li> <li>Keep actions up to date by regularly checking for new versions and updating the version number in your workflow files.</li> <li>Review your workflows for potential security risks, like unauthorized access to secrets or inappropriate use of permissions.</li> </ul>"},{"location":"github/security-policy/#rotate-access-tokens-and-keys","title":"Rotate access tokens and keys","text":"<ul> <li>Regularly rotate personal access tokens by going to https://github.com/settings/tokens and generating new tokens with the same scope as the old ones, then updating any tools or services that use them.</li> <li>Encourage organization members to update their SSH keys regularly by visiting https://github.com/settings/keys.</li> </ul>"},{"location":"github/security-policy/#set-up-security-vulnerability-alerts","title":"Set up security vulnerability alerts","text":"<ul> <li>Enable Dependabot by visiting your repository's Insights &gt; Dependency graph &gt; Dependabot.</li> <li>Configure the Dependabot settings to receive automatic security alerts and suggested updates for vulnerabilities in your project's dependencies.</li> </ul>"},{"location":"github/security-policy/#conduct-security-audits","title":"Conduct security audits","text":"<ul> <li>Regularly audit your organization and repository settings, as well as your codebase, to identify and mitigate potential security risks.</li> <li>Use tools like GitHub Advanced Security, Snyk, or SonarQube to perform automated security analysis on your codebase.</li> </ul>"},{"location":"github/security-policy/#educate-team-members","title":"Educate team members","text":"<ul> <li>Provide resources, such as blog posts, articles, and webinars, to educate your team members on security best practices.</li> <li>Organize internal training sessions and workshops to improve security awareness among your team members.</li> </ul>"},{"location":"github/security-policy/#adopt-a-security-policy","title":"Adopt a security policy","text":"<ul> <li>Add a SECURITY.md file in your repository's root directory that outlines your security policy, and encourage your team members to follow it.</li> </ul>"},{"location":"github/security-policy/#encourage-signed-commits","title":"Encourage signed commits","text":"<ul> <li>Signed commits provides verification on who made changes to the code. Without signed commits, anyone with write access to a repository can make code changes that appear to have been made by another user.</li> <li>Instructions on setting up code signing can be found on GitHub</li> </ul>"},{"location":"github-copilot/overview/","title":"Overview","text":""},{"location":"github-copilot/overview/#github-copilot-overview","title":"GitHub Copilot Overview","text":""},{"location":"github-copilot/overview/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Action Visual Studio VS Code Next inline suggestion <code>Alt</code>+ <code>.</code> <code>Alt</code>+ <code>]</code> Previous inline suggestion <code>Alt</code> + <code>,</code> <code>Alt</code>+ <code>[</code> Trigger inline suggestion <code>Ctrl</code> + <code>Alt</code> + <code>\\</code> <code>Alt</code> + <code>\\</code> Accept inline suggestion <code>Tab</code> <code>Tab</code> Dismiss inline suggestion <code>Esc</code> <code>Esc</code> Inline Copilot Chat <code>Alt</code> + <code>/</code> <code>Ctrl</code> + <code>I</code> Open Copilot Chat <code>Ctrl</code> + <code>\\</code>, <code>C</code> <code>Ctrl</code> + <code>Return</code>"},{"location":"github-copilot/overview/#slash-commands","title":"Slash Commands","text":"<ul> <li><code>/doc</code> to add a documentation comment</li> <li><code>/explain</code> to explain the code</li> <li><code>/fix</code> to propose a fix for the problems in the selected code</li> <li><code>/generate</code> to generate code to answer your question</li> <li><code>/help</code> to get help with Copilot Chat</li> <li><code>/optimize</code> to analyze and improve the running time of the selected code</li> <li><code>/tests</code> to create unit tests for the selected code</li> </ul>"},{"location":"github-copilot/overview/#context-and-scope","title":"Context and Scope","text":"<p>The context variables allow you to scope your conversation with Copilot to a file, a specific error or to the entire solution using the <code>#</code> symbol.</p> Context variable Scope <code>#file:&lt;path&gt;</code> Scope to the given file <code>#file:&lt;path&gt;:start-end</code> Scope to a range of lines within a file <code>#solution</code> Include all files in the current solution <code>#error:&lt;error_code&gt;</code> Scope to a specific error <code>#errors:&lt;path&gt;</code> Scope to all errors in a file <code>#errors:&lt;path&gt;:&lt;error_code&gt;</code> Scope to all errors with the given error code in the given file. <p>Examples</p> <ul> <li><code>How do I fix #errors:CompanyStats.cs?</code></li> <li><code>What does #file:'GitHubService.cs':78-122 do?</code></li> <li><code>/optimize #file:'GitHubService.cs':100-116</code>.</li> </ul>"},{"location":"github-copilot/overview/#further-information","title":"Further Information","text":""},{"location":"github-copilot/visual-studio/","title":"Visual Studio","text":""},{"location":"github-copilot/visual-studio/#github-copilot-in-visual-studio","title":"GitHub Copilot in Visual Studio","text":""},{"location":"github-copilot/visual-studio/#installation","title":"Installation","text":"<p>Download and install the GitHub Copilot and GitHub Copilot Chat extensions.</p>"},{"location":"github-copilot/visual-studio/#logging-in-to-github","title":"Logging in to GitHub","text":"<ol> <li>Open the Account Settings dialog by going to File &gt; Account Settings....</li> <li>From the All Accounts submenu, select + Add to add an account, and then select GitHub.</li> <li>You'll be redirected to the browser, where you can sign in with your GitHub credentials. After you sign in, you'll get a success window in the browser, and you can return to Visual Studio.</li> <li>Your GitHub account will now be present in the All Accounts submenu.</li> </ol>"},{"location":"github-copilot/visual-studio/#using-github-copilot","title":"Using GitHub Copilot","text":""},{"location":"github-copilot/visual-studio/#further-reading","title":"Further Reading","text":"<ul> <li>Getting started with GitHub Copilot</li> <li>GitHub Copilot in Visual Studio: A Recap of 2023</li> </ul>"},{"location":"github-copilot/vscode/","title":"VS Code","text":""},{"location":"github-copilot/vscode/#github-copilot-in-visual-studio-code","title":"GitHub Copilot in Visual Studio Code","text":""},{"location":"github-copilot/vscode/#installation","title":"Installation","text":"<p>Download and install the GitHub Copilot and GitHub Copilot Chat extensions.</p>"},{"location":"github-copilot/vscode/#logging-in-to-github","title":"Logging in to GitHub","text":"<ul> <li>If you have previously authorized Visual Studio Code for your account on GitHub, GitHub Copilot will be automatically authorized.</li> <li>If you don't get the prompt to authorize, click the bell icon in the bottom panel of the Visual Studio Code window.</li> <li>In your browser, GitHub will request the necessary permissions for GitHub Copilot. To approve these permissions, click Authorize Visual Studio Code.</li> <li>To confirm the authentication, in Visual Studio Code, in the \"Visual Studio Code\" dialog box, click Open.</li> </ul>"},{"location":"github-copilot/vscode/#using-github-copilot","title":"Using GitHub Copilot","text":""},{"location":"github-copilot/vscode/#further-reading","title":"Further Reading","text":"<ul> <li>Getting started with GitHub Copilot</li> </ul>"},{"location":"jira/apps/","title":"Jira Apps","text":""},{"location":"jira/apps/#jira-apps","title":"Jira Apps","text":"<p>Atlassian has a marketplace for apps that can be plugged into Jira and other Atlassian products to extend the functionality.</p> <p>The following are apps that are commonly used in the portfolio. By using the same apps as other companies, you can be assured that they are tested and fit for purpose, you can draw on the experiences of other users and our IT team can more easily support you.</p> <ul> <li> <p> Time Tracking</p> <p>Timesheets by Tempo</p> <p>Tempo is the market leader in automated time tracking for Jira, giving organizations real-time insight with time tracking features to control project costs and plan resources.</p> </li> <li> <p> Templates</p> <p>Issue Templates for Jira</p> <p>Issue Templates lets you create tasks and the whole Epic structure in just a few clicks.</p> </li> <li> <p> Test Plans</p> <p>X-Ray Test Plans</p> <p>Native Test Management. Built for every member of your team to plan, test, track and release great software</p> </li> </ul>"},{"location":"jira/training/","title":"Training","text":""},{"location":"jira/training/#jira-training","title":"Jira Training","text":""},{"location":"jira/training/#fundamentals","title":"Fundamentals","text":"<ul> <li>Jira Software Fundamentals</li> <li>Getting Started with Jira Software</li> <li>Managing Your Work in Jira Software</li> <li>Jira Best Practices for Beginners</li> </ul>"},{"location":"jira/training/#advanced","title":"Advanced","text":"<ul> <li>Tracking and Improving DevOps Metrics Within and Across Teams</li> <li>Creating and Maintaining a Project to Best Support Your Team</li> <li>How to Configure Board Settings and Filters</li> <li>Best Practices in Jira Work Management</li> <li>Async Collaboration for Distributed Teams</li> </ul>"},{"location":"jira/training/#confluence-training","title":"Confluence Training","text":"<ul> <li>Using Confluence for Documentation &amp; Knowledge Bases</li> </ul>"},{"location":"jira/training/#agile-training","title":"Agile Training","text":"<ul> <li>Agile Project Management for Software Teams</li> <li>What is Scrum? + How to Start</li> <li>Kanban - A brief introduction</li> <li>The Beginner's Guide to Agile in Jira</li> <li>Getting Started with Agile</li> <li>Kanban Basics for Everyday Users</li> <li>Scrum Basics for Everyday Users</li> </ul>"},{"location":"roadmaps/delphi/","title":"Delphi","text":""},{"location":"roadmaps/delphi/#delphi-developer-roadmap","title":"Delphi Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/delphi/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/delphi/#delphi-basics-and-advanced-concepts","title":"Delphi Basics and Advanced Concepts","text":"<ul> <li> Understanding of Object Pascal language</li> <li> VCL (Visual Component Library) for Windows desktop applications</li> <li> FireMonkey (FMX) for cross-platform GUI development (Windows, macOS, iOS, Android)</li> <li> Working with databases using FireDAC</li> <li>Advanced Features:<ul> <li> Generics</li> <li> Anonymous methods</li> <li> Interfaces and Exception handling</li> <li> Multi-threading and parallel programming</li> </ul> </li> </ul>"},{"location":"roadmaps/delphi/#integrated-development-environment-ide","title":"Integrated Development Environment (IDE)","text":"<ul> <li> RAD Studio</li> <li> Delphi IDE and its powerful features (Code Insight, Refactoring)</li> </ul>"},{"location":"roadmaps/delphi/#component-development-and-usage","title":"Component Development and Usage","text":"<ul> <li> Creating custom components and understanding component lifecycles</li> <li> Utilizing third-party components to accelerate development</li> </ul>"},{"location":"roadmaps/delphi/#database-and-data-access-technologies","title":"Database and Data Access Technologies","text":"<ul> <li> SQL databases (InterBase, PostgreSQL, MySQL, SQLite)</li> <li> Understanding of SQL and working with TDataSet descendants</li> <li> NoSQL databases (using appropriate connectors or REST APIs)</li> </ul>"},{"location":"roadmaps/delphi/#mobile-development-with-delphi","title":"Mobile Development with Delphi","text":"<ul> <li> Understanding mobile platform specifics (iOS, Android)</li> <li> Designing responsive UIs with FireMonkey</li> <li> Using platform services and accessing device hardware</li> </ul>"},{"location":"roadmaps/delphi/#web-development","title":"Web Development","text":"<ul> <li> WebBroker for building web services</li> <li> RAD Server for REST API development</li> <li> Intraweb for creating web applications</li> </ul>"},{"location":"roadmaps/delphi/#testing-and-debugging","title":"Testing and Debugging","text":"<ul> <li> Using built-in debugger in RAD Studio</li> <li> Unit testing with DUnitX</li> <li> Code profiling and optimization tools</li> </ul>"},{"location":"roadmaps/delphi/#continuous-integration-and-continuous-delivery-cicd","title":"Continuous Integration and Continuous Delivery (CI/CD)","text":"<ul> <li> Configuring CI/CD pipelines (e.g., with Jenkins or GitHub Actions)</li> <li> Automated builds and testing</li> </ul>"},{"location":"roadmaps/delphi/#deployment-and-distribution","title":"Deployment and Distribution","text":"<ul> <li> Creating installers with tools like Inno Setup</li> <li> Deploying desktop applications</li> <li> Deploying mobile applications to iOS App Store and Google Play Store</li> </ul>"},{"location":"roadmaps/delphi/#advanced-topics","title":"Advanced Topics","text":"<ul> <li> Multi-tier application architecture (DataSnap)</li> <li> Working with cloud services and APIs</li> <li> Application security best practices</li> </ul>"},{"location":"roadmaps/delphi/#keeping-up-to-date","title":"Keeping Up-to-Date","text":"<ul> <li> Staying current with the Delphi roadmap and new versions</li> <li> Participating in Delphi communities and forums (e.g., Embarcadero Community, Stack Overflow)</li> </ul>"},{"location":"roadmaps/dotnet/","title":".NET","text":""},{"location":"roadmaps/dotnet/#net-developer-roadmap","title":".NET Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/dotnet/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/dotnet/#csharp","title":"CSharp","text":"<ul> <li> CSharp 12<ul> <li>Basic Syntax: Variables, control flow (if, for, while), methods, classes, and interfaces.</li> <li>Advanced Features: Generics, delegates, events, LINQ, async/await.</li> <li>Error Handling: Exception handling using try, catch, finally blocks.</li> <li>Data Types: Understanding value types vs. reference types, nullable types, tuples, and records.</li> <li>Latest Enhancements: Records, top-level statements, pattern matching enhancements.</li> </ul> </li> <li> .NET 8</li> <li> .NET CLI</li> <li> .NET Aspire<ul> <li>Apir8</li> </ul> </li> </ul>"},{"location":"roadmaps/dotnet/#architecture","title":"Architecture","text":"<ul> <li> SOLID Principles</li> <li> MVC - Model View Controller</li> <li> MVVM - Model View ViewModel</li> <li> DRY</li> <li> YAGNI</li> <li> KISS</li> <li> Design Patterns (Gang of Four)</li> <li> Microservices Architecture: Patterns and Best Practices (e.g., CQRS, Event Sourcing)</li> <li> Clean (Onion) Architecture and Domain-Driven Design (DDD)</li> <li> Vertical Slice Architecture</li> </ul>"},{"location":"roadmaps/dotnet/#aspnet-core","title":"ASP.NET Core","text":"<ul> <li> Web API</li> <li> Minimal API</li> <li> Routing</li> <li> Middleware</li> <li> Filters</li> <li> Configuration</li> <li>Authentication<ul> <li> JWT</li> <li> Basic Auth</li> <li> Token Auth</li> <li> OAuth</li> <li> Cookies</li> <li> OpenID</li> <li> SAML</li> </ul> </li> <li> IdentityServer/Duende IdentityServer for implementing these protocols</li> <li> Authorization</li> <li> Dependency Injection</li> <li> Integrating with modern JavaScript frameworks (React, Angular, Vue)</li> </ul>"},{"location":"roadmaps/dotnet/#rdbms-databases","title":"RDBMS Databases","text":"<ul> <li> RDBMS Fundementals</li> <li> SQL Syntax</li> <li> Stored procedures</li> <li> Triggers</li> <li>Vendor specific databases<ul> <li> PostgreSQL</li> <li> SQL Server</li> <li> MySQL/MariaDB</li> <li> Oracle</li> </ul> </li> </ul>"},{"location":"roadmaps/dotnet/#apis","title":"APIs","text":"<ul> <li> REST<ul> <li> Minimal API</li> <li> Web API</li> <li> FastEndpoints</li> </ul> </li> <li> GraphQL<ul> <li> HotChocolate</li> </ul> </li> <li> gRPC</li> </ul>"},{"location":"roadmaps/dotnet/#orms","title":"ORMs","text":"<ul> <li> Dapper</li> <li> Entity Framework Core<ul> <li>EF Basics</li> <li>Code first</li> <li>Migrations</li> <li>Change tracker API</li> <li>Loading modes</li> <li>Interceptors</li> </ul> </li> <li> RepoDB</li> <li> NHibernate</li> </ul>"},{"location":"roadmaps/dotnet/#dependency-injection","title":"Dependency Injection","text":"<ul> <li> Microsoft.Extensions.DependencyInjection</li> <li> Scrutor</li> </ul>"},{"location":"roadmaps/dotnet/#nosql-databases","title":"NoSQL Databases","text":"<ul> <li> Redis</li> <li> ElasticSearch</li> <li> Cloud proprietary<ul> <li>AWS DynamoDB</li> <li>Azure Cosmos DB</li> </ul> </li> <li> Apache Cassandra</li> <li> MongoDB</li> </ul>"},{"location":"roadmaps/dotnet/#caching","title":"Caching","text":"<ul> <li> Redis<ul> <li>Stackexchange.Redis</li> </ul> </li> <li> Output caching</li> <li> Response caching</li> </ul>"},{"location":"roadmaps/dotnet/#logging","title":"Logging","text":"<ul> <li> Microsoft.Extensions.Logging</li> <li> Serilog</li> <li> NLog</li> <li> Log4Net</li> </ul>"},{"location":"roadmaps/dotnet/#messaging","title":"Messaging","text":"<ul> <li> Azure Service Bus</li> <li> AWS SQS/SNS</li> <li> MassTransit</li> <li> RabbitMQ</li> <li> Wolverine</li> <li> NServiceBus</li> </ul>"},{"location":"roadmaps/dotnet/#security","title":"Security","text":"<ul> <li> Secure coding practices</li> <li> Data protection</li> <li> ASP.NET Core security features</li> </ul>"},{"location":"roadmaps/dotnet/#front-end-technologies","title":"Front-End Technologies","text":"<ul> <li> Responsive Design: CSS, Bootstrap, Tailwind CSS</li> <li> SPA frameworks: Angular, React, Vue.js with .NET backends</li> </ul>"},{"location":"roadmaps/dotnet/#unit-testing","title":"Unit Testing","text":""},{"location":"roadmaps/dotnet/#frameworks","title":"Frameworks","text":"<ul> <li> NUnit</li> <li> xUnit</li> <li> MsTest</li> </ul>"},{"location":"roadmaps/dotnet/#mocking","title":"Mocking","text":"<ul> <li> NSubstitute</li> <li> Moq</li> <li> FakeItEasy</li> </ul>"},{"location":"roadmaps/dotnet/#assertions","title":"Assertions","text":"<ul> <li> FluentAssertions</li> <li> Shouldly</li> </ul>"},{"location":"roadmaps/dotnet/#test-data","title":"Test Data","text":"<ul> <li> Bogus</li> <li> AutoFixture</li> </ul>"},{"location":"roadmaps/dotnet/#integration-testing","title":"Integration Testing","text":"<ul> <li> WebApplicationFactory<ul> <li>TestContainers</li> <li>Respawn</li> </ul> </li> <li> Postman</li> <li> TestServer</li> </ul>"},{"location":"roadmaps/dotnet/#snapshot-testing","title":"Snapshot Testing","text":"<ul> <li> Verify</li> </ul>"},{"location":"roadmaps/dotnet/#e2e-testing","title":"E2E Testing","text":"<ul> <li> Playwright</li> <li> Selenium</li> </ul>"},{"location":"roadmaps/dotnet/#performance-testing","title":"Performance Testing","text":"<ul> <li> K6</li> <li> NBomber</li> <li> JMeter</li> </ul>"},{"location":"roadmaps/dotnet/#streaming","title":"Streaming","text":"<ul> <li> Apache Kafka</li> <li> AWS Kinesis</li> <li> Azure Event Hubs</li> </ul>"},{"location":"roadmaps/dotnet/#real-time-communication","title":"Real-Time Communication","text":"<ul> <li> SignalR</li> <li> WebSockets</li> </ul>"},{"location":"roadmaps/dotnet/#api-documentation","title":"API Documentation","text":"<ul> <li> OpenAPI</li> <li> AsyncAPI</li> </ul>"},{"location":"roadmaps/dotnet/#api-libraries","title":"API Libraries","text":"<ul> <li> Refit</li> <li> RestSharp</li> <li> Flurl</li> </ul>"},{"location":"roadmaps/dotnet/#task-scheduling","title":"Task Scheduling","text":"<ul> <li> BackgroundService</li> <li> PeriodicTimer</li> <li> HangFire</li> <li> Quartz.NET</li> </ul>"},{"location":"roadmaps/dotnet/#monitoring-telemetry","title":"Monitoring &amp; Telemetry","text":"<ul> <li> OpenTelemetry</li> <li> Prometheus</li> <li> Graphana</li> <li> ELK Stack</li> </ul>"},{"location":"roadmaps/dotnet/#containers","title":"Containers","text":"<ul> <li> Docker</li> <li> Podman</li> <li> Rancher</li> <li>Orchestration<ul> <li> Docker Compose</li> <li> Kubernetes</li> </ul> </li> <li>Tooling<ul> <li> Minikube</li> <li> K9s</li> <li> Lens</li> <li> Skaffold</li> </ul> </li> </ul>"},{"location":"roadmaps/dotnet/#cloud","title":"Cloud","text":"<ul> <li>Providers<ul> <li> Azure</li> <li> AWS</li> </ul> </li> <li>Serverless<ul> <li> Azure Functions</li> <li> AWS Lambda</li> </ul> </li> <li>Storage<ul> <li> Azure Storage</li> <li> AWS S3</li> </ul> </li> </ul>"},{"location":"roadmaps/dotnet/#cicd-continuous-integration-deployment","title":"CI/CD (Continuous Integration &amp; Deployment)","text":"<ul> <li> GitHub Actions</li> <li> TeamCity</li> <li> Azure Pipelines</li> <li> Jenkins</li> <li> Bamboo</li> <li> GitLab CI</li> <li> Octopus Deploy</li> <li>Build Automation<ul> <li> Nuke Build</li> <li> Cake</li> </ul> </li> </ul>"},{"location":"roadmaps/dotnet/#net-libraries","title":".NET Libraries","text":"<ul> <li> Polly .NET resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner</li> <li> FluentValidation .NET validation library for building strongly-typed validation rules.</li> <li> Humanizer.Core Manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities</li> <li> Benchmark.NET .NET library for benchmarking</li> <li> MediatR Simple, unambitious mediator implementation in .NET</li> <li> Units.NET Makes life working with units of measurement just a little bit better</li> </ul>"},{"location":"roadmaps/dotnet/#devops","title":"DevOps","text":"<ul> <li>Infrastructure as Code<ul> <li> TerraForm Infrastructure automation to provision and manage resources in any cloud or data center</li> <li> Pulumi Infrastructure as code in any programming language</li> <li> Ansible</li> </ul> </li> </ul>"},{"location":"roadmaps/dotnet/#learning-resources-and-community","title":"Learning Resources and Community","text":"<ul> <li> Official Microsoft Documentation, .NET Developer Blogs</li> <li> Community Forums: Stack Overflow, GitHub Discussions, Reddit</li> </ul>"},{"location":"roadmaps/java/","title":"Java","text":""},{"location":"roadmaps/java/#java-developer-roadmap","title":"Java Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/java/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/java/#java","title":"Java","text":"<ul> <li> Java 21<ul> <li>Basic Syntax: Variables, control flow (if, for, while), methods, classes, and interfaces.</li> <li>Advanced Features: Generics, lambda expressions, streams, functional interfaces, concurrency model, CompletableFuture for asynchronous programming.</li> <li>Error Handling: Exception handling using try, catch, finally, and throws clauses.</li> <li>Data Types: Understanding primitive types vs. reference types, optionals, and records.</li> <li>Virtual threads, Garbage collection and Java tuning for containerization</li> </ul> </li> <li> Maven / Gradle</li> <li> Spring Framework<ul> <li>Spring Boot</li> <li>Spring MVC</li> <li>Spring Data JPA</li> <li>Spring Security</li> </ul> </li> </ul>"},{"location":"roadmaps/java/#architecture","title":"Architecture","text":"<ul> <li> SOLID Principles</li> <li> MVC - Model View Controller</li> <li> Microservices with Spring</li> <li> DRY</li> <li> YAGNI</li> <li> KISS</li> <li> Clean (Hexagonal) Architecture</li> <li> Domain-Driven Design (DDD)</li> </ul>"},{"location":"roadmaps/java/#web-development","title":"Web Development","text":"<ul> <li> Spring MVC</li> <li> Spring WebFlux for reactive programming</li> <li>Authentication<ul> <li> JWT</li> <li> OAuth2</li> <li> Basic Auth</li> <li> OpenID Connect</li> </ul> </li> <li> Authorization with Spring Security</li> <li> Dependency Injection with Spring Framework</li> </ul>"},{"location":"roadmaps/java/#rdbms-databases","title":"RDBMS Databases","text":"<ul> <li> RDBMS Fundamentals</li> <li> SQL Syntax</li> <li> Stored procedures</li> <li> Triggers</li> <li>Vendor specific databases<ul> <li> PostgreSQL</li> <li> MySQL/MariaDB</li> <li> SQL Server</li> <li> Oracle</li> </ul> </li> </ul>"},{"location":"roadmaps/java/#apis","title":"APIs","text":"<ul> <li> REST<ul> <li>Spring Web</li> </ul> </li> <li> GraphQL<ul> <li>Spring for GraphQL</li> </ul> </li> <li> gRPC<ul> <li>gRPC Spring Boot Starter</li> </ul> </li> </ul>"},{"location":"roadmaps/java/#orms","title":"ORMs","text":"<ul> <li> Hibernate</li> <li> Spring Data JPA</li> <li> JOOQ</li> <li> Jooq</li> </ul>"},{"location":"roadmaps/java/#dependency-injection","title":"Dependency Injection","text":"<ul> <li> Spring Framework DI</li> </ul>"},{"location":"roadmaps/java/#nosql-databases","title":"NoSQL Databases","text":"<ul> <li> Redis</li> <li> ElasticSearch</li> <li> Cloud proprietary<ul> <li>AWS DynamoDB</li> <li>Azure Cosmos DB</li> </ul> </li> <li> Apache Cassandra</li> <li> MongoDB</li> </ul>"},{"location":"roadmaps/java/#caching","title":"Caching","text":"<ul> <li> Redis</li> <li> EhCache</li> </ul>"},{"location":"roadmaps/java/#logging","title":"Logging","text":"<ul> <li> SLF4J with Logback</li> <li> Log4j2</li> </ul>"},{"location":"roadmaps/java/#messaging","title":"Messaging","text":"<ul> <li> Apache Kafka</li> <li> RabbitMQ</li> <li> ActiveMQ</li> </ul>"},{"location":"roadmaps/java/#security","title":"Security","text":"<ul> <li> Secure coding practices</li> <li> Data protection</li> </ul>"},{"location":"roadmaps/java/#front-end-technologies","title":"Front-End Technologies","text":"<ul> <li> Responsive Design: CSS, Bootstrap, Tailwind CSS</li> <li> SPA frameworks: Angular, React, Vue.js with Java backends</li> </ul>"},{"location":"roadmaps/java/#unit-testing","title":"Unit Testing","text":""},{"location":"roadmaps/java/#frameworks","title":"Frameworks","text":"<ul> <li> JUnit</li> <li> TestNG</li> </ul>"},{"location":"roadmaps/java/#mocking","title":"Mocking","text":"<ul> <li> Mockito</li> <li> EasyMock</li> </ul>"},{"location":"roadmaps/java/#assertions","title":"Assertions","text":"<ul> <li> AssertJ</li> </ul>"},{"location":"roadmaps/java/#test-data","title":"Test Data","text":"<ul> <li> JUnit QuickCheck</li> </ul>"},{"location":"roadmaps/java/#integration-testing","title":"Integration Testing","text":"<ul> <li> Spring Test</li> </ul>"},{"location":"roadmaps/java/#performance-testing","title":"Performance Testing","text":"<ul> <li> Gatling</li> <li> Apache JMeter</li> </ul>"},{"location":"roadmaps/java/#containers","title":"Containers","text":"<ul> <li> Docker</li> <li> Podman</li> <li> Rancher</li> <li>Orchestration<ul> <li> Docker Compose</li> <li> Kubernetes</li> </ul> </li> <li>Tooling<ul> <li> Minikube</li> <li> K9s</li> <li> Lens</li> <li> Skaffold</li> </ul> </li> </ul>"},{"location":"roadmaps/java/#cloud","title":"Cloud","text":"<ul> <li>Providers<ul> <li> AWS</li> <li> Azure</li> </ul> </li> <li>Serverless<ul> <li> AWS Lambda</li> <li> Azure Functions</li> </ul> </li> <li>Storage<ul> <li> AWS S3</li> <li> Azure Blob Storage</li> </ul> </li> </ul>"},{"location":"roadmaps/java/#cicd-continuous-integration-deployment","title":"CI/CD (Continuous Integration &amp; Deployment)","text":"<ul> <li> GitHub Actions</li> <li> TeamCity</li> <li> Azure Pipelines</li> <li> Jenkins</li> <li> Bamboo</li> <li> GitLab CI</li> <li> Octopus Deploy</li> </ul>"},{"location":"roadmaps/java/#java-libraries","title":"Java Libraries","text":"<ul> <li> Lombok for boilerplate code reduction</li> <li> Guava for core libraries</li> <li> Apache Commons</li> </ul>"},{"location":"roadmaps/java/#devops","title":"DevOps","text":"<ul> <li>Infrastructure as Code<ul> <li> TerraForm Infrastructure automation to provision and manage resources in any cloud or data center</li> <li> Pulumi Infrastructure as code in any programming language</li> <li> Ansible</li> </ul> </li> </ul>"},{"location":"roadmaps/overview/","title":"Overview","text":""},{"location":"roadmaps/overview/#developer-roadmaps-overview","title":"Developer Roadmaps Overview","text":"<p>The purpose of these roadmaps is to provide a structured and comprehensive guide for developers navigating through the learning and development process in a specific programming language or technology stack. Each roadmap serves multiple key objectives:</p> <ul> <li> <p> Foundational Knowledge</p> <p>It outlines the essential concepts, language syntax, and foundational skills that developers need to understand before advancing to more complex topics. This ensures a solid base upon which to build further expertise.</p> </li> <li> <p> Skill Development</p> <p>The roadmap charts a path through various skill levels, from beginner to advanced, highlighting key areas where developers should focus their efforts to grow their capabilities in a structured manner.</p> </li> <li> <p> Tool and Framework Familiarity</p> <p>By including sections on relevant tools, libraries, and frameworks, the roadmap encourages developers to become proficient in the ecosystem surrounding a language or technology, enhancing their ability to build sophisticated and modern applications.</p> </li> <li> <p> Best Practices and Patterns</p> <p>It emphasizes the importance of understanding and applying best practices, design patterns, and idiomatic ways of coding within the ecosystem. This aids in writing clean, efficient, and maintainable code.</p> </li> <li> <p> Continuous Learning and Adaptation</p> <p>The technology landscape is constantly evolving, and these roadmaps highlight the importance of staying updated with the latest developments, tools, and best practices in the field. This ensures that developers remain competitive and effective in their roles.</p> </li> <li> <p> Career Progression</p> <p>Ultimately, the roadmap is designed to help developers navigate their career in technology. By following a structured learning path, developers can aim for specific roles, specializations, or advanced topics, helping them to achieve their career goals.</p> </li> </ul> <p>In summary, these roadmaps are tailored guides to help developers of all levels\u2014from beginners to experienced professionals\u2014navigate the complexities of learning new technologies and advancing their careers in software development. They are living documents, evolving as new technologies and best practices emerge, ensuring relevance and usefulness in a rapidly changing industry.</p>"},{"location":"roadmaps/php/","title":"PHP","text":""},{"location":"roadmaps/php/#php-developer-roadmap","title":"PHP Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/php/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/php/#php-basics-and-advanced-concepts","title":"PHP Basics and Advanced Concepts","text":"<ul> <li> PHP 8.x</li> <li>Basic Syntax: Variables, control flow, functions, classes, and objects.</li> <li>Advanced Features: Namespaces, Traits, Anonymous classes, Type declarations, Error handling with Exceptions and Error classes.</li> <li>Security Practices: Input validation, SQL injection prevention, XSS (Cross-Site Scripting) prevention.</li> <li> Composer for dependency management</li> </ul>"},{"location":"roadmaps/php/#web-servers","title":"Web Servers","text":"<ul> <li> Apache</li> <li> Nginx</li> <li> LiteSpeed</li> </ul>"},{"location":"roadmaps/php/#php-frameworks","title":"PHP Frameworks","text":"<ul> <li> Laravel</li> <li>Eloquent ORM</li> <li>Blade templating engine</li> <li>Artisan command-line tool</li> <li> Symfony</li> <li>Doctrine ORM</li> <li>Twig templating engine</li> <li>Symfony Console</li> <li> CodeIgniter</li> <li> Yii</li> </ul>"},{"location":"roadmaps/php/#testing","title":"Testing","text":"<ul> <li> PHPUnit</li> <li> PHPStan for static analysis</li> <li> Behat for behavior-driven development (BDD)</li> </ul>"},{"location":"roadmaps/php/#databases","title":"Databases","text":"<ul> <li> MySQL/MariaDB</li> <li> PostgreSQL</li> <li> SQLite</li> <li>Database abstraction layers &amp; ORMs</li> <li> PDO</li> <li> Doctrine ORM</li> <li> Eloquent ORM (with Laravel)</li> </ul>"},{"location":"roadmaps/php/#front-end-technologies","title":"Front-end Technologies","text":"<ul> <li> HTML/CSS, JavaScript</li> <li> Vue.js / React for more interactive front-ends</li> <li> Bootstrap for responsive design</li> <li> Tailwind CSS for utility-first CSS</li> </ul>"},{"location":"roadmaps/php/#api-development","title":"API Development","text":"<ul> <li> RESTful APIs</li> <li> GraphQL with Webonyx or Lighthouse (Laravel)</li> </ul>"},{"location":"roadmaps/php/#containers-virtualization","title":"Containers &amp; Virtualization","text":"<ul> <li> Docker</li> <li>Orchestration</li> <li> Kubernetes</li> <li>Local development environments</li> <li> Laradock</li> <li> Docker Compose</li> </ul>"},{"location":"roadmaps/php/#continuous-integration-deployment","title":"Continuous Integration &amp; Deployment","text":"<ul> <li> GitHub Actions</li> <li> Jenkins</li> <li> Travis CI</li> </ul>"},{"location":"roadmaps/php/#cloud-services","title":"Cloud Services","text":"<ul> <li> AWS</li> <li> Google Cloud Platform</li> <li> Microsoft Azure</li> <li> DigitalOcean</li> </ul>"},{"location":"roadmaps/php/#php-security","title":"PHP Security","text":"<ul> <li> Understanding of OWASP Top 10</li> <li> Secure session management, password hashing with password_hash</li> <li> Let's Encrypt for SSL certificates</li> </ul>"},{"location":"roadmaps/php/#performance-optimization","title":"Performance &amp; Optimization","text":"<ul> <li> Opcode caching (OPcache)</li> <li> Profiling with Xdebug and Blackfire</li> <li> Using CDNs for static assets</li> <li> Varnish Cache for HTTP acceleration</li> </ul>"},{"location":"roadmaps/php/#devops-infrastructure","title":"DevOps &amp; Infrastructure","text":"<ul> <li> Terraform for infrastructure as code</li> <li> Ansible for configuration management</li> </ul>"},{"location":"roadmaps/progress/","title":"Progress","text":""},{"location":"roadmaps/progress/#progress-developer-roadmap","title":"Progress Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/progress/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/progress/#progress-openedge-abl-basics","title":"Progress OpenEdge ABL Basics","text":"<ul> <li> Understanding the ABL syntax and structure</li> <li> CRUD operations with the OpenEdge database</li> <li> Working with procedures, functions, and triggers</li> <li> Understanding transaction scope and error handling</li> </ul>"},{"location":"roadmaps/progress/#database-management","title":"Database Management","text":"<ul> <li> OpenEdge RDBMS fundamentals</li> <li> Data definition, indexing, and querying</li> <li> Database maintenance and performance tuning</li> <li> SQL access in OpenEdge</li> </ul>"},{"location":"roadmaps/progress/#application-development","title":"Application Development","text":"<ul> <li> Developing desktop applications with Progress Developer Studio</li> <li> Web application development with OpenEdge WebSpeed</li> <li> Understanding Progress Application Server (PAS) for OpenEdge</li> </ul>"},{"location":"roadmaps/progress/#ui-development","title":"UI Development","text":"<ul> <li> Developing dynamic web UIs with Kendo UI</li> <li> Basics of REST and SOAP services in OpenEdge</li> <li> Mobile application development strategies with OpenEdge</li> </ul>"},{"location":"roadmaps/progress/#advanced-topics","title":"Advanced Topics","text":"<ul> <li> Integration with other systems via REST, SOAP, or JMS</li> <li> Working with JSON and XML for data interchange</li> <li> Advanced database features (Replication, Multi-tenancy)</li> </ul>"},{"location":"roadmaps/progress/#testing-and-debugging","title":"Testing and Debugging","text":"<ul> <li> ABLUnit for unit testing ABL code</li> <li> Logging and error handling best practices</li> <li> Profiling and performance optimization</li> </ul>"},{"location":"roadmaps/progress/#deployment-and-devops","title":"Deployment and DevOps","text":"<ul> <li> Understanding OpenEdge Management and OpenEdge Explorer</li> <li> Continuous integration and deployment practices</li> <li> Containerization strategies for OpenEdge applications</li> </ul>"},{"location":"roadmaps/progress/#security","title":"Security","text":"<ul> <li> Securing OpenEdge applications (Authentication, Authorization)</li> <li> Understanding OpenEdge security features (Database encryption, TLS)</li> </ul>"},{"location":"roadmaps/progress/#modernization-and-migration","title":"Modernization and Migration","text":"<ul> <li> Strategies for modernizing legacy OpenEdge applications</li> <li> Migrating to newer versions of OpenEdge</li> <li> Cloud deployment strategies for OpenEdge applications</li> </ul>"},{"location":"roadmaps/progress/#continuous-learning","title":"Continuous Learning","text":"<ul> <li> Keeping up with Progress Software updates and releases</li> <li> Participating in Progress communities and forums</li> </ul>"},{"location":"roadmaps/progress/#additional-resources","title":"Additional Resources","text":"<ul> <li>Progress Software Documentation</li> <li>Online courses and tutorials specific to Progress OpenEdge</li> <li>Community forums and discussions (Progress Community, Stack Overflow)</li> </ul>"},{"location":"roadmaps/python/","title":"Python","text":""},{"location":"roadmaps/python/#python-developer-roadmap","title":"Python Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/python/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/python/#python","title":"Python","text":"<ul> <li> Python 3.9+<ul> <li>Basic Syntax: Variables, control flow (if, else, for, while), functions, classes.</li> <li>Advanced Features: List comprehensions, generator expressions, decorators, context managers, async/await for asynchronous programming.</li> <li>Error Handling: Exception handling with try, except, finally.</li> <li>Data Types: Understanding mutable vs immutable types, using collections (list, tuple, dict, set), and typing for static type checks.</li> </ul> </li> <li> Pip (Python Package Installer)</li> <li> Virtual Environments (venv, virtualenv)</li> <li> Poetry for dependency management and packaging</li> </ul>"},{"location":"roadmaps/python/#web-development","title":"Web Development","text":"<ul> <li> Flask<ul> <li>Flask RESTful APIs</li> <li>Jinja templating</li> </ul> </li> <li> Django<ul> <li>Django ORM</li> <li>Django Templates</li> <li>Django REST Framework for APIs</li> </ul> </li> <li> FastAPI for asynchronous web applications</li> </ul>"},{"location":"roadmaps/python/#data-science-machine-learning","title":"Data Science &amp; Machine Learning","text":"<ul> <li> NumPy for numerical computing</li> <li> Pandas for data manipulation and analysis</li> <li> Matplotlib / Seaborn for data visualization</li> <li> Scikit-learn for machine learning</li> <li> TensorFlow / PyTorch for deep learning</li> </ul>"},{"location":"roadmaps/python/#testing","title":"Testing","text":"<ul> <li> Pytest</li> <li> unittest (Python's standard library)</li> <li>Mocking<ul> <li> unittest.mock</li> <li> pytest-mock</li> </ul> </li> </ul>"},{"location":"roadmaps/python/#databases","title":"Databases","text":"<ul> <li> SQL Databases<ul> <li> SQLite (good for development and small projects)</li> <li> PostgreSQL with Psycopg2 or SQLAlchemy</li> </ul> </li> <li> NoSQL Databases<ul> <li> MongoDB with PyMongo</li> <li> Redis with redis-py</li> </ul> </li> </ul>"},{"location":"roadmaps/python/#ormodm","title":"ORM/ODM","text":"<ul> <li> SQLAlchemy for SQL databases</li> <li> Django ORM (when using Django)</li> <li> Peewee</li> <li> MongoEngine for MongoDB</li> </ul>"},{"location":"roadmaps/python/#asynchronous-programming","title":"Asynchronous Programming","text":"<ul> <li> asyncio (Python's standard library for asynchronous I/O)</li> <li> aiohttp for asynchronous HTTP client/server</li> </ul>"},{"location":"roadmaps/python/#containers-virtualization","title":"Containers &amp; Virtualization","text":"<ul> <li> Docker</li> <li>Orchestration<ul> <li> Kubernetes</li> </ul> </li> <li>Tooling<ul> <li> Docker Compose for multi-container Docker applications</li> </ul> </li> </ul>"},{"location":"roadmaps/python/#cicd-automation","title":"CI/CD &amp; Automation","text":"<ul> <li> GitHub Actions</li> <li> GitLab CI/CD</li> <li> Jenkins</li> </ul> <p>Jenkins](https://www.jenkins.io/)</p>"},{"location":"roadmaps/python/#cloud-services","title":"Cloud Services","text":"<ul> <li> AWS (Amazon Web Services)</li> <li> GCP (Google Cloud Platform)</li> <li> Azure</li> <li>Serverless<ul> <li> AWS Lambda</li> <li> Azure Functions</li> <li> Google Cloud Functions</li> </ul> </li> </ul>"},{"location":"roadmaps/python/#devops-tools","title":"DevOps Tools","text":"<ul> <li>Infrastructure as Code<ul> <li> Terraform</li> <li> Ansible</li> </ul> </li> </ul>"},{"location":"roadmaps/python/#python-libraries-and-frameworks","title":"Python Libraries and Frameworks","text":"<ul> <li> Requests for HTTP requests</li> <li> Beautiful Soup / Scrapy for web scraping</li> <li> Pillow for image processing</li> </ul> <p>This roadmap focuses on Python's versatility across web development, data science, machine learning, automation, and more, providing a broad spectrum of technologies that a Python developer may want to become proficient in.</p>"},{"location":"roadmaps/rust/","title":"Rust","text":""},{"location":"roadmaps/rust/#rust-developer-roadmap","title":"Rust Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/rust/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/rust/#basic-syntax-and-concepts","title":"Basic Syntax and Concepts","text":"<ul> <li> Data types, variables, and mutability</li> <li> Control flow (if, else, loops)</li> <li> Ownership, borrowing, and lifetimes</li> <li> Functions and modularization (use, mod, crate)</li> </ul>"},{"location":"roadmaps/rust/#advanced-features","title":"Advanced Features","text":"<ul> <li> Enums and pattern matching</li> <li> Error handling (Result, Option)</li> <li> Generics, traits, and lifetimes</li> <li> Concurrency and asynchronous programming</li> </ul>"},{"location":"roadmaps/rust/#tooling-and-environment","title":"Tooling and Environment","text":""},{"location":"roadmaps/rust/#package-management-and-build-system","title":"Package Management and Build System","text":"<ul> <li> Cargo: Dependencies, build system, testing, documentation</li> <li> Crates.io: Discovering libraries and tools</li> </ul>"},{"location":"roadmaps/rust/#development-tools","title":"Development Tools","text":"<ul> <li> rustfmt for code formatting</li> <li> Clippy for linting and code recommendations</li> <li> Integrated Development Environments (IDEs) support (VSCode with Rust extension, IntelliJ Rust)</li> </ul>"},{"location":"roadmaps/rust/#ecosystem-and-libraries","title":"Ecosystem and Libraries","text":""},{"location":"roadmaps/rust/#essential-crates","title":"Essential Crates","text":"<ul> <li> serde for serialization and deserialization</li> <li> tokio/async-std for asynchronous runtime</li> <li> reqwest for HTTP requests</li> <li> diesel for ORM and database interactions (for those using SQL databases)</li> </ul>"},{"location":"roadmaps/rust/#web-development","title":"Web Development","text":"<ul> <li> Actix Web / Rocket for web server frameworks</li> <li> Yew for frontend web development (WASM)</li> </ul>"},{"location":"roadmaps/rust/#command-line-interface-cli-applications","title":"Command Line Interface (CLI) Applications","text":"<ul> <li> clap / structopt for parsing command line arguments</li> </ul>"},{"location":"roadmaps/rust/#testing-and-documentation","title":"Testing and Documentation","text":"<ul> <li> Writing unit tests and integration tests</li> <li> Documentation best practices using Markdown in comments</li> <li> Using Doc-tests for code examples in documentation</li> </ul>"},{"location":"roadmaps/rust/#advanced-topics","title":"Advanced Topics","text":"<ul> <li> Unsafe Rust for interfacing with other languages or for low-level control</li> <li> Embedded programming with Rust</li> <li> Cross-compilation for different platforms</li> <li> Macros for metaprogramming</li> </ul>"},{"location":"roadmaps/rust/#practices-and-principles","title":"Practices and Principles","text":"<ul> <li> Following Rust's idiomatic practices (The Rust Book, Rust by Example)</li> <li> Understanding common patterns and anti-patterns</li> <li> Memory safety and efficient use of resources</li> <li> Contributing to open source Rust projects</li> </ul>"},{"location":"roadmaps/rust/#continuous-learning","title":"Continuous Learning","text":"<ul> <li> Staying updated with Rust's evolution (Rust Blog, This Week in Rust)</li> <li> Engaging with the Rust community (forums, Reddit, Discord)</li> </ul>"},{"location":"roadmaps/swift/","title":"Swift","text":""},{"location":"roadmaps/swift/#swift-developer-roadmap","title":"Swift Developer Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/swift/#required-developer-skills","title":"Required Developer Skills","text":""},{"location":"roadmaps/swift/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/swift/#swift-basics-and-advanced-concepts","title":"Swift Basics and Advanced Concepts","text":"<ul> <li> Swift 5.x<ul> <li>Basic Syntax: Constants and variables, data types, control flow, functions, and closures.</li> <li>Advanced Features: Optionals, error handling, protocols, extensions, generics, and concurrency (async/await, Combine).</li> </ul> </li> <li> Understanding of Swift's memory management (ARC)</li> <li> Protocol-oriented programming</li> </ul>"},{"location":"roadmaps/swift/#development-tools","title":"Development Tools","text":"<ul> <li> Xcode</li> <li> Swift Package Manager for dependency management</li> <li> CocoaPods / Carthage (Alternatives for dependency management)</li> </ul>"},{"location":"roadmaps/swift/#ios-development","title":"iOS Development","text":"<ul> <li> UIKit for UI development (knowing SwiftUI is becoming increasingly important)</li> <li> Understanding of the MVC design pattern and how it applies to iOS apps</li> <li> Core Data for local data storage</li> <li> Grand Central Dispatch for concurrency and multi-threading</li> <li> Networking with URLSession</li> <li> MapKit &amp; Core Location for location-based services</li> </ul>"},{"location":"roadmaps/swift/#swiftui-for-modern-ios-and-macos-development","title":"SwiftUI for Modern iOS and macOS Development","text":"<ul> <li> Building custom UI components with SwiftUI</li> <li> State management in SwiftUI (State, Binding, ObservedObject, EnvironmentObject)</li> <li> Integrating SwiftUI with existing UIKit-based projects</li> </ul>"},{"location":"roadmaps/swift/#macos-development","title":"macOS Development","text":"<ul> <li> AppKit for traditional macOS UI development</li> <li> Combine framework for reactive programming</li> <li> Creating Universal Apps that run on both macOS and iOS with SwiftUI</li> </ul>"},{"location":"roadmaps/swift/#testing-and-debugging","title":"Testing and Debugging","text":"<ul> <li> Unit testing with XCTest</li> <li> UI testing with XCTestUI</li> <li> Debugging tools in Xcode (LLDB, Instruments)</li> </ul>"},{"location":"roadmaps/swift/#continuous-integration-and-continuous-delivery-cicd","title":"Continuous Integration and Continuous Delivery (CI/CD)","text":"<ul> <li> GitHub Actions for automation</li> <li> Fastlane for automating the build and deployment process</li> </ul>"},{"location":"roadmaps/swift/#app-distribution","title":"App Distribution","text":"<ul> <li> Deploying apps to the App Store</li> <li> TestFlight for beta testing</li> <li> App Store Connect API for automating tasks related to app distribution</li> </ul>"},{"location":"roadmaps/swift/#advanced-topics","title":"Advanced Topics","text":"<ul> <li> WidgetKit for building widgets on iOS and macOS</li> <li> Creating extensions for iOS and macOS apps</li> <li> Understanding and using App Clips for iOS</li> <li> Implementing in-app purchases with StoreKit</li> <li> Machine Learning with CoreML</li> <li> Augmented Reality with ARKit</li> </ul>"},{"location":"roadmaps/swift/#performance-optimization-and-monitoring","title":"Performance Optimization and Monitoring","text":"<ul> <li> Profiling app performance with Instruments</li> <li> Memory management and optimization</li> <li> Efficient use of background tasks and managing app state transitions</li> </ul>"},{"location":"roadmaps/swift/#security","title":"Security","text":"<ul> <li> Secure coding practices in Swift</li> <li> Using Keychain to store sensitive information</li> <li> Implementing app transport security (ATS) policies</li> </ul>"},{"location":"roadmaps/typescript/","title":"TypeScript & JavaScript","text":""},{"location":"roadmaps/typescript/#typescriptjavascript-roadmap","title":"TypeScript/JavaScript Roadmap","text":"<p>Legend</p> <p> Must Know  Good to Know  Alternative  Not Recommended</p>"},{"location":"roadmaps/typescript/#required-developer-skills","title":"Required Developer Skills","text":""},{"location":"roadmaps/typescript/#version-control","title":"Version Control","text":"<ul> <li> Git</li> <li> GitHub</li> <li> GitLab</li> <li> Mercurial</li> <li> SVN/Subversion</li> </ul>"},{"location":"roadmaps/typescript/#javascript-basics-and-advanced-concepts","title":"JavaScript Basics and Advanced Concepts","text":"<ul> <li> ES6+ (ECMAScript 2015 and later)<ul> <li>Basic Syntax: Variables (<code>let</code>, <code>const</code>), control flow, functions, classes.</li> <li>Advanced Features: Arrow functions, promises, async/await, destructuring, template literals, modules.</li> </ul> </li> <li> Understanding of the Event Loop and Asynchronous Programming</li> <li> DOM Manipulation and Browser APIs</li> <li> JSON and AJAX</li> </ul>"},{"location":"roadmaps/typescript/#typescript","title":"TypeScript","text":"<ul> <li> Basic Types, Interfaces, Classes, Enums</li> <li> Generics and Utility Types</li> <li> Type Inference, Type Guards, and Advanced Types</li> <li> Compilation Options in <code>tsconfig.json</code></li> </ul>"},{"location":"roadmaps/typescript/#package-managers","title":"Package Managers","text":"<ul> <li> npm / yarn</li> </ul>"},{"location":"roadmaps/typescript/#front-end-frameworks","title":"Front-end Frameworks","text":"<ul> <li> React<ul> <li>JSX</li> <li>Hooks</li> <li>Context API</li> <li>Redux for state management</li> </ul> </li> <li> Vue.js<ul> <li>Options API</li> <li>Composition API</li> <li>Vuex for state management</li> </ul> </li> <li> Angular<ul> <li>Components and Modules</li> <li>Services and Dependency Injection</li> <li>RxJS for reactive programming</li> <li>Angular CLI</li> </ul> </li> </ul>"},{"location":"roadmaps/typescript/#css-and-ui-frameworks","title":"CSS and UI Frameworks","text":"<ul> <li> CSS3, Flexbox, Grid</li> <li> Tailwind CSS</li> <li> Bootstrap</li> <li> Material-UI (for React)</li> <li> Vuetify (for Vue)</li> </ul>"},{"location":"roadmaps/typescript/#backend-nodejs","title":"Backend (Node.js)","text":"<ul> <li> Express - Minimalist web framework</li> <li> Understanding of RESTful APIs and GraphQL</li> <li> NestJS - A framework for building efficient, reliable and scalable server-side applications</li> <li> WebSocket for real-time communication</li> </ul>"},{"location":"roadmaps/typescript/#database","title":"Database","text":"<ul> <li> SQL Databases (PostgreSQL, MySQL)</li> <li> NoSQL Databases (MongoDB)</li> <li> Prisma - Next-generation ORM for Node.js and TypeScript</li> </ul>"},{"location":"roadmaps/typescript/#testing","title":"Testing","text":"<ul> <li> Jest for unit and integration testing</li> <li> Cypress / Playwright for end-to-end testing</li> <li> Enzyme (for React testing)</li> </ul>"},{"location":"roadmaps/typescript/#build-tools","title":"Build Tools","text":"<ul> <li> Webpack</li> <li> Babel (for JavaScript transpilation)</li> <li> ESLint for linting</li> <li> Prettier for code formatting</li> </ul>"},{"location":"roadmaps/typescript/#devops-and-cicd","title":"DevOps and CI/CD","text":"<ul> <li> Docker</li> <li> GitHub Actions for CI/CD</li> <li> Jenkins</li> </ul>"},{"location":"roadmaps/typescript/#cloud-services","title":"Cloud Services","text":"<ul> <li> AWS (Amazon Web Services)</li> <li> Google Cloud Platform</li> <li> Microsoft Azure</li> <li> Serverless Framework for deploying serverless applications</li> </ul>"},{"location":"roadmaps/typescript/#real-time-communication","title":"Real-Time Communication","text":"<ul> <li> WebSockets</li> <li> Socket.IO</li> </ul>"},{"location":"roadmaps/typescript/#state-management","title":"State Management","text":"<ul> <li> Context API / Redux (for React)</li> <li> Vuex (for Vue)</li> <li> NgRx (for Angular)</li> </ul>"},{"location":"roadmaps/typescript/#static-site-generators-and-ssr","title":"Static Site Generators and SSR","text":"<ul> <li> Next.js (for React)</li> <li> Nuxt.js (for Vue)</li> <li> Angular Universal (for Angular)</li> </ul>"},{"location":"roadmaps/typescript/#api-design-and-development","title":"API Design and Development","text":"<ul> <li> RESTful API Design</li> <li> GraphQL with Apollo</li> <li> Swagger for API documentation</li> </ul>"}]}